/*
为构建脚本引入依赖。
在 「模块 gp-db」 中，我们使用了 jooq 生成代码的 plugin，所以，这里，会先把这个 plugin 的 library 引入进来
 */
buildscript {
    repositories {
        maven { url 'https://maven.aliyun.com/repository/public' }
        mavenCentral()
    }
    dependencies {
        classpath 'nu.studer:gradle-jooq-plugin:4.2'
    }
}

/*
在多模块的项目中，根目录下的 build.gradle 文件，尽量把通用的全局配置都配置到这里

「project」是 gradle 里的核心概念。每个 module 都是一个 project，根目录下是 rootProject
 */
allprojects {
    // 定义所有项目的 group 和 version
    group = 'com.yangxiaochen.gradle.practice'
    version = '1.0.0-SNAPSHOT'

    // 为所有项目引入插件
    apply plugin: 'java'
    apply plugin: 'pmd'

    // 为所有项目
    repositories {
        maven { url 'https://maven.aliyun.com/repository/public' }
        mavenCentral()
    }

    // 定义一些变量
    ext {
        mysqlVersion = '8.0.18'
        jooqVersion = '3.13.1'
        jooqGenDataSourceDriver = 'com.mysql.jdbc.Driver'
        jooqGenDataSourceUrl = 'jdbc:mysql://127.0.0.1:3306/gp_database'
        jooqGenDataSourceUrlUser = 'gp_database_user'
        jooqGenDataSourceUrlPassword = 'test'
        jooqGenDataSourceInputSchema = 'gp_database'
    }

    // 为所有的项目设置依赖
    dependencies {
        pmd 'com.alibaba.p3c:p3c-pmd:1.3.6'
    }

    // Java compiler compile java source file with utf-8 (default gbk in the Windows OS with Simplified Chinese). Java source file must be 'UTF-8'.
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }
    // Set java compile version
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    // pmd config
    pmd {
        consoleOutput = true
        reportsDir = file("build/reports/pmd")
        ruleSets = [
                'java-ali-comment',
                'java-ali-concurrent',
                'java-ali-constant',
                'java-ali-exception',
                'java-ali-flowcontrol',
                'java-ali-naming',
                'java-ali-oop',
                'java-ali-orm',
                'java-ali-other',
                'java-ali-set',
        ]
        ignoreFailures = true
    }
}

// Config for every subprojects
subprojects {
    // Project gp-api is a library, it will be published as a sdk lib. So it should define exact dependencies in project's build.gradle file
    // Define spring framework's core dependencies for most projects.
    if (!['gp-api'].contains(project.name)) {
        dependencies {


            // 'implementation platform' define Spring bom
            implementation platform('org.springframework.boot:spring-boot-dependencies:2.1.11.RELEASE')
            implementation platform('org.springframework.cloud:spring-cloud-dependencies:Greenwich.SR3')

            // Spring framework core dependencies
            implementation("javax.annotation:javax.annotation-api")
            implementation("org.springframework:spring-context")
            implementation("org.springframework:spring-context-support")
            implementation("org.springframework:spring-tx")
            implementation 'org.springframework.boot:spring-boot-starter-freemarker'
            implementation 'org.aspectj:aspectjweaver'

            // Common utils dependencies
            compileOnly 'org.projectlombok:lombok:1.18.22'
            annotationProcessor 'org.projectlombok:lombok:1.18.22'
            implementation 'org.mapstruct:mapstruct:1.4.2.Final'
            annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

            implementation 'org.slf4j:slf4j-api'
            implementation group: 'org.jodd', name: 'jodd-bean', version: '5.0.3'
            implementation group: 'org.apache.commons', name: 'commons-lang3'
            implementation 'com.google.guava:guava:28.2-jre'
        }
    }

    // Dependency resolve
    configurations {
        all {
            resolutionStrategy {
                force 'com.google.guava:guava:28.2-jre'
            }
            exclude group: 'org.slf4j', module: 'slf4j-log4j12'
            exclude group: 'org.mybatis.spring.boot'
        }
    }

}
